import requests
# from urllib.parse import urljoin

from curl_cffi import requests
from lxml import etree


def url_get():
    headers = {
        "Accept": "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7",
        "Content-Type": "application/x-www-form-urlencoded",
        "Origin": "https://bidding.sinopec.com",
        "Referer": "https://bidding.sinopec.com/tpfront/CommonPages/searchmore.aspx?CategoryNum=004001",
        "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/111.0.0.0 Safari/537.36",

    }
    cookies = {

    }
    url = "https://bidding.sinopec.com/tpfront/CommonPages/searchmore.aspx"
    params = {
        "CategoryNum": "004001"
    }
    data = {
        "__VIEWSTATE": "",
        "__EVENTTARGET": "MoreinfoListsearch1$Pager",
        "__EVENTARGUMENT": "3",
        "__VIEWSTATEENCRYPTED": "",
        "__EVENTVALIDATION": "Imir67sviB441NpW+gttA3wMeCbxhkxTpOiN/5P0VX0cJLwvxZ7gxA9yIdtB9ZqhnBGOVaIZ7j42pOt3Me75nbxnA3RYJb0xm9B0KqSsyBQdq81QkxAyl9AX4oAbPWLmA+Z/jKekSRfCKfGrYwAt7z3wafF7+NqkN3nTc2x3isxONaXzDmKYedfLpnk=",
        "MoreinfoListsearch1%24txtTitle": "",
        "MoreinfoListsearch1%24slrq": "",
        "MoreinfoListsearch1%24slrq2": "",
        "MoreinfoListsearch1%24Pager_input": "2"
    }
    response = requests.post(url, headers=headers, cookies=cookies, params=params, data=data, timeout=10)
    root = etree.HTML(response.text)
    __VIEWSTATE = root.xpath("//input[@id='__VIEWSTATE']/@value")[0]
    __EVENTVALIDATION = root.xpath("//input[@id='__EVENTVALIDATION']/@value")[0]
    print(__VIEWSTATE, __EVENTVALIDATION)
    for i in range(1, 11):
        url_sec(i, __VIEWSTATE, __EVENTVALIDATION)


def url_sec(num, __VIEWSTATE, __EVENTVALIDATION):
    headers = {
        "Accept": "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7",
        "Content-Type": "application/x-www-form-urlencoded",
        "Origin": "https://bidding.sinopec.com",
        "Referer": "https://bidding.sinopec.com/tpfront/CommonPages/searchmore.aspx?CategoryNum=004001",
        "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/111.0.0.0 Safari/537.36",

    }
    cookies = {

    }
    url = "https://bidding.sinopec.com/tpfront/CommonPages/searchmore.aspx"
    params = {
        "CategoryNum": "004001"
    }
    data = {
        "__VIEWSTATE": __VIEWSTATE,
        "__EVENTTARGET": "MoreinfoListsearch1$Pager",
        "__EVENTARGUMENT": num + 1,
        "__VIEWSTATEENCRYPTED": "",
        "__EVENTVALIDATION": __EVENTVALIDATION,
        "MoreinfoListsearch1%24txtTitle": "",
        "MoreinfoListsearch1%24slrq": "",
        "MoreinfoListsearch1%24slrq2": "",
        "MoreinfoListsearch1%24Pager_input": num
    }
    response = requests.post(url, headers=headers, cookies=cookies, params=params, data=data, timeout=10)
    root = etree.HTML(response.text)
    a_list = root.xpath("//div[@class='titlecss']/a")
    for item in a_list:
        title=item.xpath("./text()")[0]
        href = item.xpath("./@href")[0]
        print({"title":title,'href':urljoin("https://bidding.sinopec.com/",href)})

if __name__ == '__main__':
    url_get()
